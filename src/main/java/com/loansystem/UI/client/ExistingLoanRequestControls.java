/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExistingLoanRequestControls.java
 *
 * Created on Feb 5, 2012, 2:36:22 PM
 */
package com.loansystem.UI.client;

import com.loansystem.backend.model.ButtonPlace;
import com.loansystem.backend.model.LoanTabModel;
import com.loansystem.db.dao.LoanStatusHome;
import com.loansystem.enums.LoanStatusInterface;

import com.loansystem.model.Loan;
import com.loansystem.model.LoanStatus;
import com.loansystem.model.PostponeRequest;
import com.loansystem.model.PostponeRequestStatus;
import java.awt.GridLayout;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JButton;

/**
 *
 * @author antonve
 */
public class ExistingLoanRequestControls extends javax.swing.JPanel {

    JButton jButton1;
    JButton jButton2;
    JButton jButton3;
    LoanTabModel loanTabModel;
    /*private final ButtonPlace payButtonLocation = new ButtonPlace(0, 0);
    private final ButtonPlace removeRequestLocation = new ButtonPlace(1, 0);
    private final ButtonPlace postponeButtonLocation = new ButtonPlace(0, 1);
    private final ButtonPlace removePostponeButtonLocation = new ButtonPlace(1, 1);*/
    private JButton jButton4;
    private JButton jButton5;

    /** Creates new form ExistingLoanRequestControls */
    public ExistingLoanRequestControls(LoanTabModel loanTabModel) {
        this.loanTabModel = loanTabModel;
        initComponents();
        setBorder(BorderFactory.createTitledBorder("Exisiting Loan Controls"));
        initComponents(this.loanTabModel);
    }

    private void initComponents(LoanTabModel loanTabModel) {


        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jButton1.setText("Remove Loan Request");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setVisible(false);



        jButton2 = new javax.swing.JButton();
        jButton2.setText("Pay Back");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.setVisible(false);



        jButton3.setText("Postpone payback");
        jButton3.setName("jButton3"); // NOI18N
        jButton3.setVisible(false);

        jButton4.setText("Cancel Postpone payback request");
        jButton4.setName("jButton4"); // NOI18N
        jButton4.setVisible(false);
        
        jButton5.setText("Choose another loan offer");
        jButton5.setName("jButton5"); // NOI18N
        jButton5.setVisible(false);

        GridLayout layout = new GridLayout(3, 3);


        setLayout(layout);

        add(jButton1, 0);
        add(jButton2, 1);
        add(jButton3, 2);
        add(jButton4, 3);
        add(jButton5, 4);
        
        
        hideUnnecessaryButtons();

       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 603, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 80, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void addRejectListener(ActionListener mal) {
        jButton1.addActionListener(mal);
    }

    public void addPayBackListener(ActionListener payBackListener) {
        jButton2.addActionListener(payBackListener);
    }

    public void addPostponeListener(ActionListener postponeListener) {
        jButton3.addActionListener(postponeListener);
    }

    public void addRemoveRequestListener(ActionListener removeRequestListener) {
        jButton1.addActionListener(removeRequestListener);
    }

    public void addRemovePostponeRequestListener(ActionListener removePostponeRequestListener) {
        jButton4.addActionListener(removePostponeRequestListener);
    }

    private boolean showPayButton(Loan loan) {
        PostponeRequest postponeRequest = loan.getPostponeRequest();
        if (postponeRequest != null) {
            PostponeRequestStatus postponeRequestStatus = postponeRequest.getPostponeRequestStatus();
            switch (Integer.parseInt(postponeRequestStatus.getId())) {
                case com.loansystem.classificator.PostponeRequestStatus.ACCEPTED:
                case com.loansystem.classificator.PostponeRequestStatus.CANCELED:
                    return true;
                case com.loansystem.classificator.PostponeRequestStatus.REJECTED:
                case com.loansystem.classificator.PostponeRequestStatus.REQUESTED:
                    return false;
                default:
                    return false;
            }
        }
        LoanStatus loanStatus = loan.getLoanStatus();
        int status = Integer.parseInt(loanStatus.getLoanStatusId());

        switch (status) {
            case LoanStatusInterface.ISSUED:
            case LoanStatusInterface.OVERDUE:
                return true;
            case LoanStatusInterface.SENT_TO_DEBT_COLLECTION:
            case LoanStatusInterface.REJECTED:
                return false;
            default:
                return false;
        }

    }

    private boolean showPostponeButton(Loan loan) {
        PostponeRequest postponeRequest = loan.getPostponeRequest();
        if (postponeRequest != null) {
            PostponeRequestStatus postponeRequestStatus = postponeRequest.getPostponeRequestStatus();
            switch (Integer.parseInt(postponeRequestStatus.getId())) {
                case com.loansystem.classificator.PostponeRequestStatus.ACCEPTED:
                case com.loansystem.classificator.PostponeRequestStatus.CANCELED:
                case com.loansystem.classificator.PostponeRequestStatus.REJECTED:
                case com.loansystem.classificator.PostponeRequestStatus.REQUESTED:
                    return false;
            }
        }
        int status = Integer.parseInt(loan.getLoanStatus().getLoanStatusId());

        switch (status) {
            case LoanStatusInterface.ISSUED:
                return true;
            case LoanStatusInterface.PENDING:
                return false;
            default:
                return false;
        }
    }

    private boolean showRemovePostponeRequestButton(Loan loan) {
        PostponeRequest postponeRequest = loan.getPostponeRequest();
        if (postponeRequest != null) {
            PostponeRequestStatus postponeRequestStatus = postponeRequest.getPostponeRequestStatus();
            switch (Integer.parseInt(postponeRequestStatus.getId())) {
                case com.loansystem.classificator.PostponeRequestStatus.ACCEPTED:
                case com.loansystem.classificator.PostponeRequestStatus.CANCELED:
                case com.loansystem.classificator.PostponeRequestStatus.REJECTED:
                    return false;
                case com.loansystem.classificator.PostponeRequestStatus.REQUESTED:
                    return true;
                default:
                    return false;
            }
        }

        return false;
    }

    private boolean showRemoveLoanRequestButton(Loan loan) {
        LoanStatus loanStatus = loan.getLoanStatus();
        int status = Integer.parseInt(loanStatus.getLoanStatusId());

        switch (status) {
            case LoanStatusInterface.PENDING:
                return true;
            default:
                return false;
        }
    }

    public void hideUnnecessaryButtons() {
        boolean showRemoveLoanRequestButton = showRemoveLoanRequestButton(loanTabModel.getLastLoan());
        jButton1.setVisible(showRemoveLoanRequestButton);


        boolean showPayButton = showPayButton(loanTabModel.getLastLoan());
        jButton2.setVisible(showPayButton);
        
        

        boolean showPostponeButton = showPostponeButton(loanTabModel.getLastLoan());
        jButton3.setVisible(showPostponeButton);
   

        boolean showRemovePostponeRequestButton = showRemovePostponeRequestButton(loanTabModel.getLastLoan());
        jButton4.setVisible(showRemovePostponeRequestButton);
        
        boolean showChooseAnotherLoanOfferButton = showChooseAnotherLoanOfferButton(loanTabModel.getLastLoan());
        jButton5.setVisible(showChooseAnotherLoanOfferButton);
    }

    private boolean showChooseAnotherLoanOfferButton(Loan lastLoan) {
        LoanStatus loanStatus = lastLoan.getLoanStatus();
        int status = Integer.parseInt(loanStatus.getLoanStatusId());

        switch (status) {
            case LoanStatusInterface.REJECTED:
                return true;
            default:
                return false;
        }
    }

    public void addChooseOtherLoanOfferListener(ActionListener chooseOtherLoanOfferListener) {
        jButton5.addActionListener(chooseOtherLoanOfferListener);
    }
}
